<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hospital Bed Finder - Account</title>
    <link rel="icon" type="image/x-icon" href="/images/logo.png">
    <link rel="stylesheet" href="/css/account.css">
</head>
<body>
    <div id="wrapper">
        <header>
            <div class="feedHeader">
                <div class="buttonWrapper whiteText">
                    <button id="homeButton">
                        <img src="/images/left_arrow_white.png" alt="Left arrow"><span>Back to home</span>
                    </button>
                </div>
                <div class="logo">
                    <div>
                        <img src="/images/logo.png" alt="HBF_LOGO">
                    </div>
                    <h1 class="logoName">
                        <a class="whiteText" href="https://hospitalbedfinder.com">H<span class="nameLower">ospital</span> B<span class="nameLower">ed</span> F<span class="nameLower">inder</span></a>
                    </h1>    
                </div>
                <div class="buttonWrapper whiteText">
                    <button id="logoutButton">
                        <span>Logout</span>
                        <img src="/images/logout_white.png" alt="Logout">
                    </button>
                </div>
            </div>
            <div class="spacer"></div>
        </header>
        <main>
            <div class="accountWrapper">
                <div class="imageWrapper">
                    <img src="<%= image %>" alt="Hospital image">
                </div>
                <div class="detailsWrapper">
                    <% if (!validated) { %>
                        <div class="notice">
                            <p>
                                This hospital will not be displayed on the homepage because it is not validated.
                                To validate this account, please email us through hospitalbedfinder@gmail.com with
                                attachments to prove the legitimacy of this hospital and your association with such.
                            </p>
                        </div>
                    <% } %>
                    <form id="editForm" method="post">
                        <ul class="detailsList">
                            <li class="detail">
                                <p class="detailLabel">Name</p>
                                <p id="hospitalName" class="detailInfo"><%= name %></p>
                                <div class="detailInputWrapper">
                                    <input type="text" name="name" id="inputName" class="detailInput" placeholder="Enter name here">
                                    <p id="nameError" class="error"></p>
                                </div>
                            </li>
                            <li class="detail">
                                <p class="detailLabel">Address</p>
                                <p id="hospitalLocation" class="detailInfo"><%= location %></p>
                                <div class="detailInputWrapper">
                                    <input type="text" name="location" id="inputLocation" class="detailInput" placeholder="Enter address here">
                                </div>
                            </li>
                            <li class="detail">
                                <p class="detailLabel">Contact number</p>
                                <p id="hospitalContact" class="detailInfo"><%= contactNum %></p>
                                <div class="detailInputWrapper">
                                    <input type="text" name="contactNum" id="inputContactNum" class="detailInput" placeholder="Enter contact number here">
                                </div>
                            </li>
                            <li class="detail">
                                <p class="detailLabel">Maximum bed count</p>
                                <p id="hospitalMaxBeds" class="detailInfo"><%= maxBeds %></p>
                                <div class="detailInputWrapper">
                                    <input type="text" name="maxBeds" id="inputMaxBeds" class="detailInput" maxlength="6" placeholder="Enter maximum beds here">
                                </div>
                            </li>
                        </ul>
                    </form>
                    <div class="editWrapper">
                        <button id="editButton" class="editButton">Edit</button>
                        <div id="toggledButtonsWrapper" class="toggledButtonsWrapper">
                            <button id="saveButton" class="saveButton">Save</button>
                            <button id="cancelButton" class="cancelButton">Cancel</button>
                        </div>
                        <p id="requestError" class="error"></p>
                    </div>
                    <div class="bedCountWrapper">
                        <p class="detailLabel">Available bed count</p>
                        <div class="upperSection">
                            <span id="availableBedCount"><%= availableBeds %></span>
                            <button id="minusOneChangeBedBtn" class="negativeButton">-1</button>
                            <button id="plusOneChangeBedBtn" class="positiveButton">+1</button>
                        </div>
                        <div class="middleSection">
                            <p>Custom:</p>
                            <input type="text" name="customBedCount" id="customBedCount" maxlength="6" placeholder="Enter custom amount here">
                        </div>
                        <div class="lowerSection">
                            <button id="minusChangeBedBtn" class="negativeButton">-</button>
                            <button id="plusChangeBedBtn" class="positiveButton">+</button>
                        </div>
                        <p id="customBedCountError" class="error"></p>
                    </div>
                </div>
            </div>
        </main>
    </div>
</body>
<script>
    let baseUrl = window.location.origin;

    // Logout feature
    function Logout(){
        window.location.href = `${baseUrl}/api/logout`;
        return;
    }
    let logoutButton = document.getElementById("logoutButton");
    logoutButton.addEventListener("click", Logout);

    // Homepage feature
    function BackToHomepage(){
        window.location.href = `${baseUrl}/interface/hospitalFeed`;
        return;
    }
    let homeButton = document.getElementById("homeButton");
    homeButton.addEventListener("click", BackToHomepage);

    // Edit account feature
    document.getElementById("inputName").addEventListener("change", e => {
        e.target.value = e.target.value.trim();
    });

    document.getElementById("inputLocation").addEventListener("change", e => {
        e.target.value = e.target.value.trim();
    });

    const inputContact = document.getElementById("inputContactNum");
    inputContact.addEventListener("input", function(event){
        let lastValue = inputContact.value;
        inputContact.value = lastValue.replace(/[^0-9\s\-\(\)\+]/g, "");
        if(inputContact.value.length > 16){
            inputContact.value = lastValue.substring(0,16);
        }
    });

    document.getElementById("inputMaxBeds").addEventListener("input", function(event){
        let inputValue = this.value;
        inputValue = inputValue.replace(/[^0-9\b]/g,'');
        this.value = inputValue;
    });
    
    let editInputs = document.querySelectorAll(".detailInputWrapper");
    function hideInputs(hideBool){
        editInputs.forEach(input => {
            input.classList.toggle("hide", hideBool);
        });
    }
    hideInputs(true);
    
    let details = document.querySelectorAll(".detailInfo");
    function hideDetails(hideBool){
        details.forEach(detail => {
            detail.classList.toggle("hide", hideBool);
        });
    }

    function setDetailsToInputs(){
        for (let i = 0; i < editInputs.length; i++) {
            editInputs[i].children[0].value = details[i].innerText;
        }
    }
    setDetailsToInputs();

    let errorList = document.querySelectorAll(".error");
    const toggledButtons = document.getElementById("toggledButtonsWrapper");
    toggledButtons.classList.toggle("hide", true);
    const editButton = document.getElementById("editButton");
    function toggleEdit(e){
        hideInputs(false);
        hideDetails(true);
        toggledButtons.classList.toggle("hide", false);
        e.target.classList.toggle("hide", true);
    }
    editButton.addEventListener("click", toggleEdit);

    document.getElementById("cancelButton").addEventListener("click", e => {
        hideInputs(true);
        hideDetails(false);
        setDetailsToInputs();
        editButton.classList.toggle("hide", false);
        toggledButtons.classList.toggle("hide", true);
        errorList.forEach(error => {
            errorList.innerText = "";
        });
    });

    const editForm = document.getElementById("editForm");
    document.getElementById("saveButton").addEventListener("click", async (e) => {
        const formData = new FormData(editForm);
        const res = await fetch(baseUrl + "/api/editProfile", {
            method: "post",
            body: JSON.stringify(Object.fromEntries(formData)),
            mode: "cors",
            headers: new Headers({
                "Content-Type": "application/json",
            }),
        });
        const resBody = await res.json();
        if (resBody.success){
            window.location.reload();
            return;
        }

        let errorField = document.getElementById(`${resBody.field}Error`);
        errorField.innerText = resBody.error;
        return;
    });

    // Available bed modification feature
    document.getElementById("plusOneChangeBedBtn").addEventListener("click", e => {
        ChangeAvailableBeds('+');
    });
    document.getElementById("minusOneChangeBedBtn").addEventListener("click", e => {
        ChangeAvailableBeds('-');
    });
    
    document.getElementById("plusChangeBedBtn").addEventListener("click", e => {
        SubmitCustomBedCount('+');
    });
    document.getElementById("minusChangeBedBtn").addEventListener("click", e => {
        SubmitCustomBedCount('-');
    });

    let changeCounter = 0;
    let requestTimer = null;
    const maxBedCount = document.getElementById("hospitalMaxBeds");
    const availableBedCount = document.getElementById("availableBedCount");
    const customBedCount = document.getElementById("customBedCount");
    const customBedCountError = document.getElementById("customBedCountError");
    customBedCount.addEventListener("input", function(event){
        let inputValue = this.value;
        inputValue = inputValue.replace(/[^0-9\b]/g,"");
        this.value = inputValue;
    });

    function ChangeAvailableBeds(sign){
        if (parseInt(availableBedCount.innerText) + parseInt(`${sign}1`) > parseInt(maxBedCount.innerText)){
            if (customBedCountError.innerText == "") customBedCountError.innerText = "The availabled bed count cannot exceed the maximum bed count!";
            return;
        }
        else {
            if (customBedCountError.innerText != "") customBedCountError.innerText = "";
        }

        changeCounter += parseInt(`${sign}1`);
        availableBedCount.innerText = parseInt(availableBedCount.innerText) + parseInt(`${sign}1`);

        if (requestTimer == null){
            requestTimer = setTimeout(SubmitChangeRequest, 3000);
        }

        return;
    }
    
    function SubmitCustomBedCount(sign){
        if (!customBedCount.value){
            if (customBedCountError.innerText == "") customBedCountError.innerText = "Please enter a custom number to add/subtract to the bed count";
            return;
        }

        if (parseInt(availableBedCount.innerText) + parseInt(`${sign}${customBedCount.value}`) > parseInt(maxBedCount.innerText)){
            if (customBedCountError.innerText == "") customBedCountError.innerText = "The availabled bed count cannot exceed the maximum bed count!";
            return;
        }

        if (customBedCountError.innerText != "") customBedCountError.innerText = "";

        changeCounter += parseInt(`${sign}${customBedCount.value}`);
        availableBedCount.innerText = parseInt(availableBedCount.innerText) + parseInt(`${sign}${customBedCount.value}`);
        
        if (requestTimer == null){
            requestTimer = setTimeout(SubmitChangeRequest, 3000);
        }

        return;
    }

    async function SubmitChangeRequest(){
        const countObj = {changeValue: changeCounter};
        fetch(baseUrl + "/api/changeBedValue", {
            method: "post",
            body: JSON.stringify(countObj),
            mode: "cors",
            headers: new Headers({
                "Content-Type": "application/json",
            }),
        });

        changeCounter = 0;
        clearTimeout(requestTimer);
        requestTimer = null;
        return;
    }

</script>
</html>